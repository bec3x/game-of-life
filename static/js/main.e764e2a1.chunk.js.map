{"version":3,"sources":["components/Cell.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","this","props","x","y","CELL_SIZE","className","style","left","top","width","height","Component","wrem","window","innerWidth","hrem","innerHeight","WIDTH","HEIGHT","Game","state","cells","interval","isRunning","runGame","setState","runIteration","stopGame","clearTimeout","timeoutHandler","handleIntervalChange","event","target","value","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","makeCells","handleClear","makeEmptyBoard","handleRandom","random","showRules","document","getElementById","display","hideRules","e","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","boardRef","getBoundingClientRect","doc","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","onChange","onClick","id","backgroundSize","ref","n","map","cell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e764e2a1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Cell extends Component {\r\n    render() {\r\n        const {x, y, CELL_SIZE} = this.props;\r\n\r\n        return (\r\n            <div\r\n                className='cell'\r\n                style={{left: `${CELL_SIZE * x + 1}px`, top: `${CELL_SIZE * y + 1}px`, width: `${CELL_SIZE - 1}px`, height: `${CELL_SIZE - 1}px`}}\r\n            >                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst CELL_SIZE = 20;\r\n\r\nconst wrem = window.innerWidth % CELL_SIZE;\r\nconst hrem = window.innerHeight % CELL_SIZE;\r\n\r\nconst WIDTH = window.innerWidth - wrem;\r\nconst HEIGHT = window.innerHeight - hrem - (2 * 20);\r\n\r\nexport default class Game extends Component {\r\n    constructor() {\r\n        super();\r\n        this.rows = HEIGHT / CELL_SIZE;\r\n        this.cols = WIDTH / CELL_SIZE;\r\n        this.board = this.makeEmptyBoard();\r\n    }\r\n\r\n    state = {\r\n        cells: [], \r\n        interval: 50, \r\n        isRunning: false, \r\n    }\r\n\r\n    runGame = () => { \r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () => { \r\n        this.setState({ isRunning: false}); \r\n\r\n        window.clearTimeout(this.timeoutHandler);\r\n        this.timeoutHandler = null;\r\n        \r\n    }\r\n\r\n    handleIntervalChange = (event) => { this.setState({ interval: event.target.value }); }\r\n\r\n    runIteration() {\r\n        let newBoard = this.makeEmptyBoard();\r\n        \r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                let neighbors = this.calculateNeighbors(this.board, x, y);\r\n                if (this.board[y][x]) {\r\n                    if (neighbors === 2 || neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                } else {\r\n                    if (!this.board[y][x] && neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({ cells: this.makeCells() });\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    calculateNeighbors(board, x, y) {\r\n        let neighbors = 0;\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n\r\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n                neighbors++;\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    }    \r\n\r\n    makeEmptyBoard() {\r\n        let board = [];\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            board[y] = []\r\n\r\n            for (let x = 0; x < this.cols; x++) {\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    makeCells() {\r\n        let cells = [];\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                if (this.board[y][x]) {\r\n                    cells.push({x, y})\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    getElementOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop\r\n        };\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        const elemOffset = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffset.x;\r\n        const offsetY = event.clientY - elemOffset.y;\r\n\r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    handleClear = () => {\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    handleRandom = () => {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                Math.random() >= 0.5 ? this.board[y][x] = true : this.board[y][x] = false;                               \r\n            }\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    showRules = () => {\r\n        const modal = document.getElementById('rules-modal');\r\n        modal.style.display = \"block\";\r\n    }\r\n\r\n    hideRules = (e) => {\r\n        const modal = document.getElementById('rules-modal');\r\n        modal.style.display = \"none\";\r\n    }\r\n\r\n    render() {\r\n        const { cells, interval, isRunning } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className='controls'>\r\n                    <h1>Conway's Game of Life</h1>\r\n                    Update every <input value={interval} onChange={this.handleIntervalChange}/> msec \r\n                    {isRunning ? \r\n                        <button className='button' onClick={this.stopGame}>Stop</button> : <button className='button' onClick={this.runGame}>Run</button>\r\n                    }\r\n                    <button className='button' onClick={this.handleClear}>Clear</button>\r\n                    <button className='button' onClick={this.handleRandom}>Random</button>\r\n                    <button id='btn-modal' className='button' onClick={this.showRules}>Rules</button>\r\n                    <div id='rules-modal' className='modal'>\r\n                        <div className='modal-content'>\r\n                            <div className='modal-header'>\r\n                                <span className='close' onClick={this.hideRules}>&times;</span>\r\n                                <h2>Rules of Conway's Game of Life</h2>\r\n                            </div>\r\n                            <div className='modal-body'>\r\n                                <ol>\r\n                                    <li>Any live cell with fewer than two neighbors dies, as if caused by underpopulation.</li>\r\n                                    <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n                                    <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>\r\n                                    <li>Any dead cell with exactly three live neighbors becomes a live celll, as if by reproduction.</li>\r\n                                </ol>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div \r\n                    className='board'\r\n                    style={{width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\r\n                    onClick={this.handleClick}\r\n                    ref={(n) => {this.boardRef = n; }}\r\n                >\r\n                    {cells.map(cell => (\r\n                        <Cell x={cell.x} y={cell.y} CELL_SIZE={CELL_SIZE} key={`${cell.x}, ${cell.y}`} />\r\n                    ))}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import Game from \"./components/Game\";\nimport \"./game.css\"\nimport \"./index.css\"\n\nfunction App() {\n  return (\n    <div><Game /></div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}